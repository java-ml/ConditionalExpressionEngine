// Generated from ConditionExpr.g4 by ANTLR 4.13.0
package com.example;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue"})
public class ConditionExprLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.13.0", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		BOOLEAN=1, STRING=2, IDENTIFIER=3, INTEGER=4, FLOAT=5, WS=6, PLUS=7, MINUS=8, 
		MULTIPLY=9, DIVIDE=10, MODULO=11, NOT=12, AND=13, OR=14, EQ=15, NEQ=16, 
		GT=17, GE=18, LT=19, LE=20, LPAREN=21, RPAREN=22, COMMA=23, BACKTICK=24;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"BOOLEAN", "STRING", "ESC", "UNICODE", "HEX", "IDENTIFIER", "ESC_IDENT", 
			"INTEGER", "FLOAT", "WS", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULO", 
			"NOT", "AND", "OR", "EQ", "NEQ", "GT", "GE", "LT", "LE", "LPAREN", "RPAREN", 
			"COMMA", "BACKTICK"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, null, null, "'+'", "'-'", "'*'", "'/'", 
			"'%'", "'!'", "'&&'", "'||'", "'=='", "'!='", "'>'", "'>='", "'<'", "'<='", 
			"'('", "')'", "','", "'`'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "BOOLEAN", "STRING", "IDENTIFIER", "INTEGER", "FLOAT", "WS", "PLUS", 
			"MINUS", "MULTIPLY", "DIVIDE", "MODULO", "NOT", "AND", "OR", "EQ", "NEQ", 
			"GT", "GE", "LT", "LE", "LPAREN", "RPAREN", "COMMA", "BACKTICK"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public ConditionExprLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "ConditionExpr.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\u0004\u0000\u0018\u00bb\u0006\uffff\uffff\u0002\u0000\u0007\u0000\u0002"+
		"\u0001\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002"+
		"\u0004\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002"+
		"\u0007\u0007\u0007\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002"+
		"\u000b\u0007\u000b\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e"+
		"\u0002\u000f\u0007\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011"+
		"\u0002\u0012\u0007\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014"+
		"\u0002\u0015\u0007\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017"+
		"\u0002\u0018\u0007\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a"+
		"\u0002\u001b\u0007\u001b\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000"+
		"\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0003\u0000"+
		"C\b\u0000\u0001\u0001\u0001\u0001\u0001\u0001\u0005\u0001H\b\u0001\n\u0001"+
		"\f\u0001K\t\u0001\u0001\u0001\u0001\u0001\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0003\u0002R\b\u0002\u0001\u0003\u0001\u0003\u0001\u0003\u0001"+
		"\u0003\u0001\u0003\u0001\u0003\u0001\u0004\u0001\u0004\u0001\u0005\u0001"+
		"\u0005\u0005\u0005^\b\u0005\n\u0005\f\u0005a\t\u0005\u0001\u0005\u0001"+
		"\u0005\u0001\u0005\u0004\u0005f\b\u0005\u000b\u0005\f\u0005g\u0001\u0005"+
		"\u0003\u0005k\b\u0005\u0001\u0006\u0001\u0006\u0001\u0006\u0003\u0006"+
		"p\b\u0006\u0001\u0007\u0004\u0007s\b\u0007\u000b\u0007\f\u0007t\u0001"+
		"\b\u0004\bx\b\b\u000b\b\f\by\u0001\b\u0001\b\u0005\b~\b\b\n\b\f\b\u0081"+
		"\t\b\u0001\b\u0001\b\u0004\b\u0085\b\b\u000b\b\f\b\u0086\u0003\b\u0089"+
		"\b\b\u0001\t\u0004\t\u008c\b\t\u000b\t\f\t\u008d\u0001\t\u0001\t\u0001"+
		"\n\u0001\n\u0001\u000b\u0001\u000b\u0001\f\u0001\f\u0001\r\u0001\r\u0001"+
		"\u000e\u0001\u000e\u0001\u000f\u0001\u000f\u0001\u0010\u0001\u0010\u0001"+
		"\u0010\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0012\u0001\u0012\u0001"+
		"\u0012\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0014\u0001\u0014\u0001"+
		"\u0015\u0001\u0015\u0001\u0015\u0001\u0016\u0001\u0016\u0001\u0017\u0001"+
		"\u0017\u0001\u0017\u0001\u0018\u0001\u0018\u0001\u0019\u0001\u0019\u0001"+
		"\u001a\u0001\u001a\u0001\u001b\u0001\u001b\u0000\u0000\u001c\u0001\u0001"+
		"\u0003\u0002\u0005\u0000\u0007\u0000\t\u0000\u000b\u0003\r\u0000\u000f"+
		"\u0004\u0011\u0005\u0013\u0006\u0015\u0007\u0017\b\u0019\t\u001b\n\u001d"+
		"\u000b\u001f\f!\r#\u000e%\u000f\'\u0010)\u0011+\u0012-\u0013/\u00141\u0015"+
		"3\u00165\u00177\u0018\u0001\u0000\b\u0002\u0000\"\"\\\\\b\u0000\"\"//"+
		"\\\\bbffnnrrtt\u0003\u000009AFaf\u0003\u0000AZ__az\u0004\u000009AZ__a"+
		"z\u0002\u0000\\\\``\u0001\u000009\u0003\u0000\t\n\r\r  \u00c5\u0000\u0001"+
		"\u0001\u0000\u0000\u0000\u0000\u0003\u0001\u0000\u0000\u0000\u0000\u000b"+
		"\u0001\u0000\u0000\u0000\u0000\u000f\u0001\u0000\u0000\u0000\u0000\u0011"+
		"\u0001\u0000\u0000\u0000\u0000\u0013\u0001\u0000\u0000\u0000\u0000\u0015"+
		"\u0001\u0000\u0000\u0000\u0000\u0017\u0001\u0000\u0000\u0000\u0000\u0019"+
		"\u0001\u0000\u0000\u0000\u0000\u001b\u0001\u0000\u0000\u0000\u0000\u001d"+
		"\u0001\u0000\u0000\u0000\u0000\u001f\u0001\u0000\u0000\u0000\u0000!\u0001"+
		"\u0000\u0000\u0000\u0000#\u0001\u0000\u0000\u0000\u0000%\u0001\u0000\u0000"+
		"\u0000\u0000\'\u0001\u0000\u0000\u0000\u0000)\u0001\u0000\u0000\u0000"+
		"\u0000+\u0001\u0000\u0000\u0000\u0000-\u0001\u0000\u0000\u0000\u0000/"+
		"\u0001\u0000\u0000\u0000\u00001\u0001\u0000\u0000\u0000\u00003\u0001\u0000"+
		"\u0000\u0000\u00005\u0001\u0000\u0000\u0000\u00007\u0001\u0000\u0000\u0000"+
		"\u0001B\u0001\u0000\u0000\u0000\u0003D\u0001\u0000\u0000\u0000\u0005N"+
		"\u0001\u0000\u0000\u0000\u0007S\u0001\u0000\u0000\u0000\tY\u0001\u0000"+
		"\u0000\u0000\u000bj\u0001\u0000\u0000\u0000\rl\u0001\u0000\u0000\u0000"+
		"\u000fr\u0001\u0000\u0000\u0000\u0011\u0088\u0001\u0000\u0000\u0000\u0013"+
		"\u008b\u0001\u0000\u0000\u0000\u0015\u0091\u0001\u0000\u0000\u0000\u0017"+
		"\u0093\u0001\u0000\u0000\u0000\u0019\u0095\u0001\u0000\u0000\u0000\u001b"+
		"\u0097\u0001\u0000\u0000\u0000\u001d\u0099\u0001\u0000\u0000\u0000\u001f"+
		"\u009b\u0001\u0000\u0000\u0000!\u009d\u0001\u0000\u0000\u0000#\u00a0\u0001"+
		"\u0000\u0000\u0000%\u00a3\u0001\u0000\u0000\u0000\'\u00a6\u0001\u0000"+
		"\u0000\u0000)\u00a9\u0001\u0000\u0000\u0000+\u00ab\u0001\u0000\u0000\u0000"+
		"-\u00ae\u0001\u0000\u0000\u0000/\u00b0\u0001\u0000\u0000\u00001\u00b3"+
		"\u0001\u0000\u0000\u00003\u00b5\u0001\u0000\u0000\u00005\u00b7\u0001\u0000"+
		"\u0000\u00007\u00b9\u0001\u0000\u0000\u00009:\u0005t\u0000\u0000:;\u0005"+
		"r\u0000\u0000;<\u0005u\u0000\u0000<C\u0005e\u0000\u0000=>\u0005f\u0000"+
		"\u0000>?\u0005a\u0000\u0000?@\u0005l\u0000\u0000@A\u0005s\u0000\u0000"+
		"AC\u0005e\u0000\u0000B9\u0001\u0000\u0000\u0000B=\u0001\u0000\u0000\u0000"+
		"C\u0002\u0001\u0000\u0000\u0000DI\u0005\"\u0000\u0000EH\u0003\u0005\u0002"+
		"\u0000FH\b\u0000\u0000\u0000GE\u0001\u0000\u0000\u0000GF\u0001\u0000\u0000"+
		"\u0000HK\u0001\u0000\u0000\u0000IG\u0001\u0000\u0000\u0000IJ\u0001\u0000"+
		"\u0000\u0000JL\u0001\u0000\u0000\u0000KI\u0001\u0000\u0000\u0000LM\u0005"+
		"\"\u0000\u0000M\u0004\u0001\u0000\u0000\u0000NQ\u0005\\\u0000\u0000OR"+
		"\u0007\u0001\u0000\u0000PR\u0003\u0007\u0003\u0000QO\u0001\u0000\u0000"+
		"\u0000QP\u0001\u0000\u0000\u0000R\u0006\u0001\u0000\u0000\u0000ST\u0005"+
		"u\u0000\u0000TU\u0003\t\u0004\u0000UV\u0003\t\u0004\u0000VW\u0003\t\u0004"+
		"\u0000WX\u0003\t\u0004\u0000X\b\u0001\u0000\u0000\u0000YZ\u0007\u0002"+
		"\u0000\u0000Z\n\u0001\u0000\u0000\u0000[_\u0007\u0003\u0000\u0000\\^\u0007"+
		"\u0004\u0000\u0000]\\\u0001\u0000\u0000\u0000^a\u0001\u0000\u0000\u0000"+
		"_]\u0001\u0000\u0000\u0000_`\u0001\u0000\u0000\u0000`k\u0001\u0000\u0000"+
		"\u0000a_\u0001\u0000\u0000\u0000be\u0005`\u0000\u0000cf\u0003\r\u0006"+
		"\u0000df\b\u0005\u0000\u0000ec\u0001\u0000\u0000\u0000ed\u0001\u0000\u0000"+
		"\u0000fg\u0001\u0000\u0000\u0000ge\u0001\u0000\u0000\u0000gh\u0001\u0000"+
		"\u0000\u0000hi\u0001\u0000\u0000\u0000ik\u0005`\u0000\u0000j[\u0001\u0000"+
		"\u0000\u0000jb\u0001\u0000\u0000\u0000k\f\u0001\u0000\u0000\u0000lo\u0005"+
		"\\\u0000\u0000mp\u0007\u0005\u0000\u0000np\u0003\u0007\u0003\u0000om\u0001"+
		"\u0000\u0000\u0000on\u0001\u0000\u0000\u0000p\u000e\u0001\u0000\u0000"+
		"\u0000qs\u0007\u0006\u0000\u0000rq\u0001\u0000\u0000\u0000st\u0001\u0000"+
		"\u0000\u0000tr\u0001\u0000\u0000\u0000tu\u0001\u0000\u0000\u0000u\u0010"+
		"\u0001\u0000\u0000\u0000vx\u0007\u0006\u0000\u0000wv\u0001\u0000\u0000"+
		"\u0000xy\u0001\u0000\u0000\u0000yw\u0001\u0000\u0000\u0000yz\u0001\u0000"+
		"\u0000\u0000z{\u0001\u0000\u0000\u0000{\u007f\u0005.\u0000\u0000|~\u0007"+
		"\u0006\u0000\u0000}|\u0001\u0000\u0000\u0000~\u0081\u0001\u0000\u0000"+
		"\u0000\u007f}\u0001\u0000\u0000\u0000\u007f\u0080\u0001\u0000\u0000\u0000"+
		"\u0080\u0089\u0001\u0000\u0000\u0000\u0081\u007f\u0001\u0000\u0000\u0000"+
		"\u0082\u0084\u0005.\u0000\u0000\u0083\u0085\u0007\u0006\u0000\u0000\u0084"+
		"\u0083\u0001\u0000\u0000\u0000\u0085\u0086\u0001\u0000\u0000\u0000\u0086"+
		"\u0084\u0001\u0000\u0000\u0000\u0086\u0087\u0001\u0000\u0000\u0000\u0087"+
		"\u0089\u0001\u0000\u0000\u0000\u0088w\u0001\u0000\u0000\u0000\u0088\u0082"+
		"\u0001\u0000\u0000\u0000\u0089\u0012\u0001\u0000\u0000\u0000\u008a\u008c"+
		"\u0007\u0007\u0000\u0000\u008b\u008a\u0001\u0000\u0000\u0000\u008c\u008d"+
		"\u0001\u0000\u0000\u0000\u008d\u008b\u0001\u0000\u0000\u0000\u008d\u008e"+
		"\u0001\u0000\u0000\u0000\u008e\u008f\u0001\u0000\u0000\u0000\u008f\u0090"+
		"\u0006\t\u0000\u0000\u0090\u0014\u0001\u0000\u0000\u0000\u0091\u0092\u0005"+
		"+\u0000\u0000\u0092\u0016\u0001\u0000\u0000\u0000\u0093\u0094\u0005-\u0000"+
		"\u0000\u0094\u0018\u0001\u0000\u0000\u0000\u0095\u0096\u0005*\u0000\u0000"+
		"\u0096\u001a\u0001\u0000\u0000\u0000\u0097\u0098\u0005/\u0000\u0000\u0098"+
		"\u001c\u0001\u0000\u0000\u0000\u0099\u009a\u0005%\u0000\u0000\u009a\u001e"+
		"\u0001\u0000\u0000\u0000\u009b\u009c\u0005!\u0000\u0000\u009c \u0001\u0000"+
		"\u0000\u0000\u009d\u009e\u0005&\u0000\u0000\u009e\u009f\u0005&\u0000\u0000"+
		"\u009f\"\u0001\u0000\u0000\u0000\u00a0\u00a1\u0005|\u0000\u0000\u00a1"+
		"\u00a2\u0005|\u0000\u0000\u00a2$\u0001\u0000\u0000\u0000\u00a3\u00a4\u0005"+
		"=\u0000\u0000\u00a4\u00a5\u0005=\u0000\u0000\u00a5&\u0001\u0000\u0000"+
		"\u0000\u00a6\u00a7\u0005!\u0000\u0000\u00a7\u00a8\u0005=\u0000\u0000\u00a8"+
		"(\u0001\u0000\u0000\u0000\u00a9\u00aa\u0005>\u0000\u0000\u00aa*\u0001"+
		"\u0000\u0000\u0000\u00ab\u00ac\u0005>\u0000\u0000\u00ac\u00ad\u0005=\u0000"+
		"\u0000\u00ad,\u0001\u0000\u0000\u0000\u00ae\u00af\u0005<\u0000\u0000\u00af"+
		".\u0001\u0000\u0000\u0000\u00b0\u00b1\u0005<\u0000\u0000\u00b1\u00b2\u0005"+
		"=\u0000\u0000\u00b20\u0001\u0000\u0000\u0000\u00b3\u00b4\u0005(\u0000"+
		"\u0000\u00b42\u0001\u0000\u0000\u0000\u00b5\u00b6\u0005)\u0000\u0000\u00b6"+
		"4\u0001\u0000\u0000\u0000\u00b7\u00b8\u0005,\u0000\u0000\u00b86\u0001"+
		"\u0000\u0000\u0000\u00b9\u00ba\u0005`\u0000\u0000\u00ba8\u0001\u0000\u0000"+
		"\u0000\u0010\u0000BGIQ_egjoty\u007f\u0086\u0088\u008d\u0001\u0006\u0000"+
		"\u0000";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}